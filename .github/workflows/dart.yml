name: Dart

on:
  push:
    branches: [ master ]

env:
  JAVA_VERSION: "18.x"
  FLUTTER_CHANNEL: "stable"
  FLUTTER_KEYS_PATH: "./keys.json"
  PROPERTIES_PATH: "./android/key.properties"

jobs:
  flutter_test:
    name: Run flutter test and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}
      - uses: subosito/flutter-action@v2
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
      - run: flutter clean
      - run: flutter pub get
      - run: flutter analyze
      - run: flutter test

        # build_ios:
        #   name: Build Flutter (iOS)
        #   needs: [flutter_test]
        #   runs-on: macos-latest
        #   steps:
        #     - uses: maxim-lobanov/setup-xcode@v1
        #       with:
        #         xcode-version: latest-stable
        # #     - uses: actions/checkout@v3
        #     - uses: actions/setup-java@v1
        #       with:
        #         java-version: ${{env.JAVA_VERSION}}
        #     - uses: subosito/flutter-action@v2.8.0
        #       with:
        #         channel: ${{env.FLUTTER_CHANNEL}}
        #     - uses: ruby/setup-ruby@v1
        #       with:
        #         ruby-version: '3.1.2'
        #     - name: Install Fastlane
        #       run: cd ios && bundle install && cd ..
        #     - run: flutter clean
        #     - run: flutter pub get
        #     - name: Install pods
        #       run: cd ios && pod install && cd ..
        #     - run: flutter build ios --release --no-codesign
        #     - name: Execute Fastlane command
        #       run: cd ios && fastlane release type:github
        #       timeout-minutes: 40

  build_apk:
    name: Build Flutter (Android apk) 
    needs: [flutter_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}
      - uses: subosito/flutter-action@v2
        with:
          channel: ${{env.FLUTTER_CHANNEL}}
      - run: |
          echo flutter.targetSdkVersion=\${{ vars.TARGET_SDK_VERSION }} >> ${{env.PROPERTIES_PATH}}

          echo { >> ${{ env.FLUTTER_KEYS_PATH }}
          echo \"YOUTUBE_APIKEY\":\"\${{ secrets.YOUTUBE_APIKEY }}\" >> ${{ env.FLUTTER_KEYS_PATH }}
          echo } >> ${{ env.FLUTTER_KEYS_PATH }}
      - run: flutter clean
      - run: flutter pub get
      - run: flutter build apk --release --dart-define-from-file=${{ env.FLUTTER_KEYS_PATH }}
      - name: Tar apk file
        run: tar -cvf build/app/outputs/flutter-apk/app-release.tar build/app/outputs/flutter-apk/app-release.apk
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.tar
          retention: 7

  beta_apk:
    name: Upload Android Beta to Firebase App Distribution
    needs: [build_apk]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 18
      uses: actions/setup-java@v1
      with:
        java-version: ${{env.JAVA_VERSION}}
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: app-release
    - name: Display structure of downloaded files
      run: ls -R
    - name: Untar file
      run: tar -xvf app-release.tar
    - name: upload artifact to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{secrets.FIREBASE_APP_ID}}
        serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
        groups: testers
        file: app-release.apk
